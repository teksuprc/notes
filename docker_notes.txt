

# Docker Primer




# Running Docker Images

## Existing Docker Image in Docker Hub: https://hub.docker.com

My two test images are public and can be pulled down by anyone.

1) teksuprc/webtest			https://cloud.docker.com/repository/docker/teksuprc/webtest
2) teksuprc/webapp-images	https://cloud.docker.com/repository/docker/teksuprc/webapp-image

### Commands

#### Build

// build docker image
// 1) create a dockerfile at the root of your deployment folder
// 2) create a folder containing your webapp-image

example:
dockerbuild
	dockerfile
	mywebapp
		index.html
		main.js
		styles.css

// cd to dockerbuild.
//-t, --tag	list	name  and optionally a tag in the 'name:tag' format
docker build -t <image name> .


#### Push

// push to docker hub. NOTE: the image name must map to your docker hub login
// example: https://hub.docker.com/teksuprc/mywebapp
// would have an image name of: teksuprc/mywebapp
docker push <image name>


#### Pull

// pull from docker hub.
// example: https://hub.docker.com/teksuprc/mywebapp
// would have an image name of: teksuprc/mywebapp
docker pull <image name>


#### Run
// -d, --detach			run the container in the background
// -p, --publish list	publish the containers ports to the host
// example: docker run --name webapp -d -p 80:80 webapp-image
docker run --name <alias> -d -p <port>:<mapped port> <container name>


#### Tags
// there can be as many tags as you need
// this is needed to push to repo's to match the repo directory
docker tag <image name> <new tag>


#### PS
// find current running containers
docker ps


## Existing Docker Image in Gitlab: Gitlab.devops.geointservices.io


How to use the Container Registry

1) First log in to GitLab’s Container Registry using your GitLab username and password. If you have 2FA enabled you need to use a personal access token:

docker login gitlab.devops.geointservices.io:5000


You can also use a deploy token for read-only access to the registry images.

Once you log in, you’re free to create and upload a container image using the common build and push commands

docker build -t gitlab.devops.geointservices.io:5000/uxd/docker-repo .
docker push gitlab.devops.geointservices.io:5000/uxd/docker-repo

Use different image names

GitLab supports up to 3 levels of image names. The following examples of images are valid for your project:
gitlab.devops.geointservices.io:5000/uxd/docker-repo
:tag
gitlab.devops.geointservices.io:5000/uxd/docker-repo/optional-image-name:tag
gitlab.devops.geointservices.io:5000/uxd/docker-repo/optional-name/optional-image-name:tag



docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname


***** docker run
docker run --name dynamo -it -p 8080:8080 amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -cors * -port 8080

